items:
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  id: ShardMap
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  children:
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.CloneCore
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.CreateShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardCreationInfo)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.CreateShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.DeleteShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.GetShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.GetShards
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.KeyType
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.MapType
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.Name
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKey``1(``0,System.String)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKey``1(``0,System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKeyAsync``1(``0,System.String)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKeyAsync``1(``0,System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.ToString
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.TryGetShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard@)
  langs:
  - csharp
  - vb
  name: ShardMap
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  type: Class
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: ShardMap
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 14
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nRepresents a collection of shards and mappings between keys and shards in the collection.\n"
  example: []
  syntax:
    content: 'public abstract class ShardMap : ICloneable<ShardMap>'
    content.vb: >-
      Public MustInherit Class ShardMap
          Implements ICloneable(Of ShardMap)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.Name
  commentId: P:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.Name
  id: Name
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  langs:
  - csharp
  - vb
  name: Name
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.Name
  type: Property
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: Name
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 42
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: Shard map name.
  example: []
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.MapType
  commentId: P:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.MapType
  id: MapType
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  langs:
  - csharp
  - vb
  name: MapType
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.MapType
  type: Property
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: MapType
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 51
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: Shard map type.
  example: []
  syntax:
    content: public ShardMapType MapType { get; }
    content.vb: Public ReadOnly Property MapType As ShardMapType
    parameters: []
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.KeyType
  commentId: P:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.KeyType
  id: KeyType
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  langs:
  - csharp
  - vb
  name: KeyType
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.KeyType
  type: Property
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: KeyType
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 60
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: Shard map key type.
  example: []
  syntax:
    content: public ShardKeyType KeyType { get; }
    content.vb: Public ReadOnly Property KeyType As ShardKeyType
    parameters: []
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardKeyType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.ToString
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.ToString
  id: ToString
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.ToString()
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: ToString
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 121
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nConverts the object to its string representation.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: String representation of the object.
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKey``1(``0,System.String)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKey``1(``0,System.String)
  id: OpenConnectionForKey``1(``0,System.String)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  langs:
  - csharp
  - vb
  name: OpenConnectionForKey<TKey>(TKey, String)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKey<TKey>(TKey, System.String)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: OpenConnectionForKey
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 144
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nOpens a regular <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> to the shard \nto which the specified key value is mapped, with <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions.Validate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nNote that the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> object returned by this call is not protected against transient faults. \nCallers should follow best practices to protect the connection against transient faults \nin their application code, e.g., by using the transient fault handling \nfunctionality in the Enterprise Library from Microsoft Patterns and Practices team.\nThis call only works if there is a single default mapping.\n"
  example: []
  syntax:
    content: public SqlConnection OpenConnectionForKey<TKey>(TKey key, string connectionString)
    content.vb: Public Function OpenConnectionForKey(Of TKey)(key As TKey, connectionString As String) As SqlConnection
    parameters:
    - id: key
      type: '{TKey}'
      description: Input key value.
    - id: connectionString
      type: System.String
      description: "\nConnection string with credential information such as SQL Server credentials or Integrated Security settings. \nThe hostname of the server and the database name for the shard are obtained from the lookup operation for key.\n"
    typeParameters:
    - id: TKey
      description: Type of the key.
    return:
      type: System.Data.SqlClient.SqlConnection
      description: An opened SqlConnection.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKey(Of TKey)(TKey, System.String)
  name.vb: OpenConnectionForKey(Of TKey)(TKey, String)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKey``1(``0,System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKey``1(``0,System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  id: OpenConnectionForKey``1(``0,System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  langs:
  - csharp
  - vb
  name: OpenConnectionForKey<TKey>(TKey, String, ConnectionOptions)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKey<TKey>(TKey, System.String, Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: OpenConnectionForKey
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 169
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nOpens a regular <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> to the shard \nto which the specified key value is mapped.\n"
  remarks: "\nNote that the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> object returned by this call is not protected against transient faults. \nCallers should follow best practices to protect the connection against transient faults \nin their application code, e.g., by using the transient fault handling \nfunctionality in the Enterprise Library from Microsoft Patterns and Practices team.\nThis call only works if there is a single default mapping.\n"
  example: []
  syntax:
    content: public SqlConnection OpenConnectionForKey<TKey>(TKey key, string connectionString, ConnectionOptions options)
    content.vb: Public Function OpenConnectionForKey(Of TKey)(key As TKey, connectionString As String, options As ConnectionOptions) As SqlConnection
    parameters:
    - id: key
      type: '{TKey}'
      description: Input key value.
    - id: connectionString
      type: System.String
      description: "\nConnection string with credential information such as SQL Server credentials or Integrated Security settings. \nThe hostname of the server and the database name for the shard are obtained from the lookup operation for key.\n"
    - id: options
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions
      description: Options for validation operations to perform on opened connection.
    typeParameters:
    - id: TKey
      description: Type of the key.
    return:
      type: System.Data.SqlClient.SqlConnection
      description: An opened SqlConnection.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKey(Of TKey)(TKey, System.String, Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  name.vb: OpenConnectionForKey(Of TKey)(TKey, String, ConnectionOptions)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKeyAsync``1(``0,System.String)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKeyAsync``1(``0,System.String)
  id: OpenConnectionForKeyAsync``1(``0,System.String)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  langs:
  - csharp
  - vb
  name: OpenConnectionForKeyAsync<TKey>(TKey, String)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKeyAsync<TKey>(TKey, System.String)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: OpenConnectionForKeyAsync
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 217
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nAsynchronously opens a regular <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> to the shard \nto which the specified key value is mapped, with <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions.Validate\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nNote that the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> object returned by this call is not protected against transient faults. \nCallers should follow best practices to protect the connection against transient faults \nin their application code, e.g., by using the transient fault handling \nfunctionality in the Enterprise Library from Microsoft Patterns and Practices team.\nThis call only works if there is a single default mapping.\n"
  example: []
  syntax:
    content: public Task<SqlConnection> OpenConnectionForKeyAsync<TKey>(TKey key, string connectionString)
    content.vb: Public Function OpenConnectionForKeyAsync(Of TKey)(key As TKey, connectionString As String) As Task(Of SqlConnection)
    parameters:
    - id: key
      type: '{TKey}'
      description: Input key value.
    - id: connectionString
      type: System.String
      description: "\nConnection string with credential information such as SQL Server credentials or Integrated Security settings. \nThe hostname of the server and the database name for the shard are obtained from the lookup operation for key.\n"
    typeParameters:
    - id: TKey
      description: Type of the key.
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlConnection}
      description: A Task encapsulating an opened SqlConnection.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKeyAsync(Of TKey)(TKey, System.String)
  name.vb: OpenConnectionForKeyAsync(Of TKey)(TKey, String)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKeyAsync``1(``0,System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKeyAsync``1(``0,System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  id: OpenConnectionForKeyAsync``1(``0,System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  langs:
  - csharp
  - vb
  name: OpenConnectionForKeyAsync<TKey>(TKey, String, ConnectionOptions)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKeyAsync<TKey>(TKey, System.String, Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: OpenConnectionForKeyAsync
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 242
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nAsynchronously opens a regular <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> to the shard \nto which the specified key value is mapped.\n"
  remarks: "\nNote that the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> object returned by this call is not protected against transient faults. \nCallers should follow best practices to protect the connection against transient faults \nin their application code, e.g., by using the transient fault handling \nfunctionality in the Enterprise Library from Microsoft Patterns and Practices team.\nThis call only works if there is a single default mapping.\n"
  example: []
  syntax:
    content: public Task<SqlConnection> OpenConnectionForKeyAsync<TKey>(TKey key, string connectionString, ConnectionOptions options)
    content.vb: Public Function OpenConnectionForKeyAsync(Of TKey)(key As TKey, connectionString As String, options As ConnectionOptions) As Task(Of SqlConnection)
    parameters:
    - id: key
      type: '{TKey}'
      description: Input key value.
    - id: connectionString
      type: System.String
      description: "\nConnection string with credential information such as SQL Server credentials or Integrated Security settings. \nThe hostname of the server and the database name for the shard are obtained from the lookup operation for key.\n"
    - id: options
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions
      description: Options for validation operations to perform on opened connection.
    typeParameters:
    - id: TKey
      description: Type of the key.
    return:
      type: System.Threading.Tasks.Task{System.Data.SqlClient.SqlConnection}
      description: A Task encapsulating an opened SqlConnection.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.OpenConnectionForKeyAsync(Of TKey)(TKey, System.String, Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions)
  name.vb: OpenConnectionForKeyAsync(Of TKey)(TKey, String, ConnectionOptions)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.GetShards
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.GetShards
  id: GetShards
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  langs:
  - csharp
  - vb
  name: GetShards()
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.GetShards()
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetShards
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 276
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nGets all shards from the shard map.\n"
  example: []
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]

      public IEnumerable<Shard> GetShards()
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")>

      Public Function GetShards As IEnumerable(Of Shard)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard}
      description: All shards belonging to the shard map.
  attributes:
  - type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute
    ctor: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Microsoft.Design
    - type: System.String
      value: CA1024:UsePropertiesWhereAppropriate
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.GetShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.GetShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  id: GetShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  langs:
  - csharp
  - vb
  name: GetShard(ShardLocation)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.GetShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetShard
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 307
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nObtains the shard for the specified location.\n"
  example: []
  syntax:
    content: public Shard GetShard(ShardLocation location)
    content.vb: Public Function GetShard(location As ShardLocation) As Shard
    parameters:
    - id: location
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
      description: Location of the shard.
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
      description: Shard which has the specified location.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.TryGetShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard@)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.TryGetShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard@)
  id: TryGetShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard@)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  langs:
  - csharp
  - vb
  name: TryGetShard(ShardLocation, out Shard)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.TryGetShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation, out Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: TryGetShard
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 352
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nTries to obtains the shard for the specified location.\n"
  example: []
  syntax:
    content: public bool TryGetShard(ShardLocation location, out Shard shard)
    content.vb: Public Function TryGetShard(location As ShardLocation, ByRef shard As Shard) As Boolean
    parameters:
    - id: location
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
      description: Location of the shard.
    - id: shard
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
      description: Shard which has the specified location.
    return:
      type: System.Boolean
      description: <code>true</code> if shard with specified location is found, <code>false</code> otherwise.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.TryGetShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation, ByRef Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  name.vb: TryGetShard(ShardLocation, ByRef Shard)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.CreateShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardCreationInfo)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.CreateShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardCreationInfo)
  id: CreateShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardCreationInfo)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  langs:
  - csharp
  - vb
  name: CreateShard(ShardCreationInfo)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.CreateShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardCreationInfo)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: CreateShard
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 386
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nCreates a new shard and registers it with the shard map.\n"
  example: []
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1062:Validate arguments of public methods", MessageId = "0")]

      public Shard CreateShard(ShardCreationInfo shardCreationArgs)
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1062:Validate arguments of public methods", MessageId:="0")>

      Public Function CreateShard(shardCreationArgs As ShardCreationInfo) As Shard
    parameters:
    - id: shardCreationArgs
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardCreationInfo
      description: Information about shard to be added.
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
      description: A new shard registered with this shard map.
  attributes:
  - type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute
    ctor: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Microsoft.Design
    - type: System.String
      value: CA1062:Validate arguments of public methods
    namedArguments:
    - name: MessageId
      type: System.String
      value: "0"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.CreateShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.CreateShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  id: CreateShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  langs:
  - csharp
  - vb
  name: CreateShard(ShardLocation)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.CreateShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: CreateShard
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 425
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nAtomically adds a shard to ShardMap using the specified location.\n"
  example: []
  syntax:
    content: public Shard CreateShard(ShardLocation location)
    content.vb: Public Function CreateShard(location As ShardLocation) As Shard
    parameters:
    - id: location
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
      description: Location of shard to be added.
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
      description: A shard attached to this shard map.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.DeleteShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.DeleteShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  id: DeleteShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  langs:
  - csharp
  - vb
  name: DeleteShard(Shard)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.DeleteShard(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: DeleteShard
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 462
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nRemoves a shard from ShardMap.\n"
  example: []
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1062:Validate arguments of public methods", MessageId = "0")]

      public void DeleteShard(Shard shard)
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1062:Validate arguments of public methods", MessageId:="0")>

      Public Sub DeleteShard(shard As Shard)
    parameters:
    - id: shard
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
      description: Shard to remove.
  attributes:
  - type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute
    ctor: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Microsoft.Design
    - type: System.String
      value: CA1062:Validate arguments of public methods
    namedArguments:
    - name: MessageId
      type: System.String
      value: "0"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.CloneCore
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.CloneCore
  id: CloneCore
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  langs:
  - csharp
  - vb
  name: CloneCore()
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap.CloneCore()
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: CloneCore
    path: Src/ElasticScale.Client/ShardManagement/ShardMap/ShardMap.cs
    startLine: 675
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nClones the current shard map instance.\n"
  example: []
  syntax:
    content: protected abstract ShardMap CloneCore()
    content.vb: Protected MustOverride Function CloneCore As ShardMap
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
      description: Cloned shard map instance.
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
references:
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: ShardMapType
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapType
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardKeyType
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: ShardKeyType
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardKeyType
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: true
  name: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions.Validate
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: System.Data.SqlClient
  isExternal: false
  name: System.Data.SqlClient
  fullName: System.Data.SqlClient
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: ConnectionOptions
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ConnectionOptions
- uid: System.Threading.Tasks.Task{System.Data.SqlClient.SqlConnection}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<SqlConnection>
  fullName: System.Threading.Tasks.Task<System.Data.SqlClient.SqlConnection>
  fullname.vb: System.Threading.Tasks.Task(Of System.Data.SqlClient.SqlConnection)
  name.vb: Task(Of SqlConnection)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Shard>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard>
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard)
  name.vb: IEnumerable(Of Shard)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
    name: Shard
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
    name: Shard
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: ShardLocation
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: Shard
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Shard
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardCreationInfo
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: ShardCreationInfo
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardCreationInfo
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: ShardMap
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
