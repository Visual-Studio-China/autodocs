items:
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  commentId: T:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  id: ShardMapManager
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  children:
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.CreateListShardMap``1(System.String)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.CreateRangeShardMap``1(System.String)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.DeleteShardMap(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetDistinctShardLocations
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetListShardMap``1(System.String)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetRangeShardMap``1(System.String)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetRecoveryManager
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetSchemaInfoCollection
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetShardMap(System.String)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetShardMaps
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.TryGetListShardMap``1(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap{``0}@)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.TryGetRangeShardMap``1(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap{``0}@)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.TryGetShardMap(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap@)
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.UpgradeGlobalStore
  - Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.UpgradeLocalStore(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  langs:
  - csharp
  - vb
  name: ShardMapManager
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  type: Class
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: ShardMapManager
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 15
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nServes as the entry point for creation, management and lookup operations over shard maps.\n"
  example: []
  syntax:
    content: public sealed class ShardMapManager
    content.vb: Public NotInheritable Class ShardMapManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.CreateListShardMap``1(System.String)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.CreateListShardMap``1(System.String)
  id: CreateListShardMap``1(System.String)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  langs:
  - csharp
  - vb
  name: CreateListShardMap<TKey>(String)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.CreateListShardMap<TKey>(System.String)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: CreateListShardMap
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 156
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nCreates a list based <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap`1\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ListShardMap<TKey> CreateListShardMap<TKey>(string shardMapName)
    content.vb: Public Function CreateListShardMap(Of TKey)(shardMapName As String) As ListShardMap(Of TKey)
    parameters:
    - id: shardMapName
      type: System.String
      description: Name of shard map.
    typeParameters:
    - id: TKey
      description: Type of keys.
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap{{TKey}}
      description: List shard map with the specified name.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.CreateListShardMap(Of TKey)(System.String)
  name.vb: CreateListShardMap(Of TKey)(String)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.CreateRangeShardMap``1(System.String)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.CreateRangeShardMap``1(System.String)
  id: CreateRangeShardMap``1(System.String)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  langs:
  - csharp
  - vb
  name: CreateRangeShardMap<TKey>(String)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.CreateRangeShardMap<TKey>(System.String)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: CreateRangeShardMap
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 206
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nCreate a range based <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap`1\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public RangeShardMap<TKey> CreateRangeShardMap<TKey>(string shardMapName)
    content.vb: Public Function CreateRangeShardMap(Of TKey)(shardMapName As String) As RangeShardMap(Of TKey)
    parameters:
    - id: shardMapName
      type: System.String
      description: Name of shard map.
    typeParameters:
    - id: TKey
      description: Type of keys.
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap{{TKey}}
      description: Range shard map with the specified name.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.CreateRangeShardMap(Of TKey)(System.String)
  name.vb: CreateRangeShardMap(Of TKey)(String)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.DeleteShardMap(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.DeleteShardMap(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap)
  id: DeleteShardMap(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  langs:
  - csharp
  - vb
  name: DeleteShardMap(ShardMap)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.DeleteShardMap(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: DeleteShardMap
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 253
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nRemoves the specified shard map.\n"
  example: []
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1062:Validate arguments of public methods", MessageId = "0")]

      public void DeleteShardMap(ShardMap shardMap)
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1062:Validate arguments of public methods", MessageId:="0")>

      Public Sub DeleteShardMap(shardMap As ShardMap)
    parameters:
    - id: shardMap
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
      description: Shardmap to be removed.
  attributes:
  - type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute
    ctor: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Microsoft.Design
    - type: System.String
      value: CA1062:Validate arguments of public methods
    namedArguments:
    - name: MessageId
      type: System.String
      value: "0"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetShardMaps
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetShardMaps
  id: GetShardMaps
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  langs:
  - csharp
  - vb
  name: GetShardMaps()
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetShardMaps()
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetShardMaps
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 285
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nObtains all shard maps associated with the shard map manager.\n"
  example: []
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate", Justification = "Method is appropriate here because we're not just returning object state")]

      public IEnumerable<ShardMap> GetShardMaps()
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate", Justification:="Method is appropriate here because we're not just returning object state")>

      Public Function GetShardMaps As IEnumerable(Of ShardMap)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap}
      description: Collection of shard maps associated with the shard map manager.
  attributes:
  - type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute
    ctor: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Microsoft.Design
    - type: System.String
      value: CA1024:UsePropertiesWhereAppropriate
    namedArguments:
    - name: Justification
      type: System.String
      value: Method is appropriate here because we're not just returning object state
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetShardMap(System.String)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetShardMap(System.String)
  id: GetShardMap(System.String)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  langs:
  - csharp
  - vb
  name: GetShardMap(String)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetShardMap(System.String)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetShardMap
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 316
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nObtains a <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap\" data-throw-if-not-resolved=\"false\"></xref> given the name.\n"
  example: []
  syntax:
    content: public ShardMap GetShardMap(string shardMapName)
    content.vb: Public Function GetShardMap(shardMapName As String) As ShardMap
    parameters:
    - id: shardMapName
      type: System.String
      description: Name of shard map.
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
      description: Shardmap with the specificed name.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.TryGetShardMap(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap@)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.TryGetShardMap(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap@)
  id: TryGetShardMap(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap@)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  langs:
  - csharp
  - vb
  name: TryGetShardMap(String, out ShardMap)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.TryGetShardMap(System.String, out Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: TryGetShardMap
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 352
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nTries to obtains a <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap\" data-throw-if-not-resolved=\"false\"></xref> given the name.\n"
  example: []
  syntax:
    content: public bool TryGetShardMap(string shardMapName, out ShardMap shardMap)
    content.vb: Public Function TryGetShardMap(shardMapName As String, ByRef shardMap As ShardMap) As Boolean
    parameters:
    - id: shardMapName
      type: System.String
      description: Name of shard map.
    - id: shardMap
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
      description: Shard map with the specified name.
    return:
      type: System.Boolean
      description: <code>true</code> if shard map with the specified name was found, <code>false</code> otherwise.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.TryGetShardMap(System.String, ByRef Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap)
  name.vb: TryGetShardMap(String, ByRef ShardMap)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetListShardMap``1(System.String)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetListShardMap``1(System.String)
  id: GetListShardMap``1(System.String)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  langs:
  - csharp
  - vb
  name: GetListShardMap<TKey>(String)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetListShardMap<TKey>(System.String)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetListShardMap
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 386
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nObtains a <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap`1\" data-throw-if-not-resolved=\"false\"></xref> given the name. \n"
  example: []
  syntax:
    content: public ListShardMap<TKey> GetListShardMap<TKey>(string shardMapName)
    content.vb: Public Function GetListShardMap(Of TKey)(shardMapName As String) As ListShardMap(Of TKey)
    parameters:
    - id: shardMapName
      type: System.String
      description: Name of shard map.
    typeParameters:
    - id: TKey
      description: Key type.
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap{{TKey}}
      description: Resulting ShardMap.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetListShardMap(Of TKey)(System.String)
  name.vb: GetListShardMap(Of TKey)(String)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.TryGetListShardMap``1(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap{``0}@)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.TryGetListShardMap``1(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap{``0}@)
  id: TryGetListShardMap``1(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap{``0}@)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  langs:
  - csharp
  - vb
  name: TryGetListShardMap<TKey>(String, out ListShardMap<TKey>)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.TryGetListShardMap<TKey>(System.String, out Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap<TKey>)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: TryGetListShardMap
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 423
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nTries to obtains a <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap`1\" data-throw-if-not-resolved=\"false\"></xref> given the name. \n"
  example: []
  syntax:
    content: public bool TryGetListShardMap<TKey>(string shardMapName, out ListShardMap<TKey> shardMap)
    content.vb: Public Function TryGetListShardMap(Of TKey)(shardMapName As String, ByRef shardMap As ListShardMap(Of TKey)) As Boolean
    parameters:
    - id: shardMapName
      type: System.String
      description: Name of shard map.
    - id: shardMap
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap{{TKey}}
      description: Shard map with the specified name.
    typeParameters:
    - id: TKey
      description: Key type.
    return:
      type: System.Boolean
      description: <code>true</code> if shard map with the specified name was found, <code>false</code> otherwise.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.TryGetListShardMap(Of TKey)(System.String, ByRef Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap(Of TKey))
  name.vb: TryGetListShardMap(Of TKey)(String, ByRef ListShardMap(Of TKey))
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetRangeShardMap``1(System.String)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetRangeShardMap``1(System.String)
  id: GetRangeShardMap``1(System.String)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  langs:
  - csharp
  - vb
  name: GetRangeShardMap<TKey>(String)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetRangeShardMap<TKey>(System.String)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetRangeShardMap
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 457
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nObtains a <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap`1\" data-throw-if-not-resolved=\"false\"></xref> given the name. \n"
  example: []
  syntax:
    content: public RangeShardMap<TKey> GetRangeShardMap<TKey>(string shardMapName)
    content.vb: Public Function GetRangeShardMap(Of TKey)(shardMapName As String) As RangeShardMap(Of TKey)
    parameters:
    - id: shardMapName
      type: System.String
      description: Name of shard map.
    typeParameters:
    - id: TKey
      description: Key type.
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap{{TKey}}
      description: Resulting ShardMap.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetRangeShardMap(Of TKey)(System.String)
  name.vb: GetRangeShardMap(Of TKey)(String)
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.TryGetRangeShardMap``1(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap{``0}@)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.TryGetRangeShardMap``1(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap{``0}@)
  id: TryGetRangeShardMap``1(System.String,Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap{``0}@)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  langs:
  - csharp
  - vb
  name: TryGetRangeShardMap<TKey>(String, out RangeShardMap<TKey>)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.TryGetRangeShardMap<TKey>(System.String, out Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap<TKey>)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: TryGetRangeShardMap
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 494
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nTries to obtains a <xref href=\"Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap`1\" data-throw-if-not-resolved=\"false\"></xref> given the name. \n"
  example: []
  syntax:
    content: public bool TryGetRangeShardMap<TKey>(string shardMapName, out RangeShardMap<TKey> shardMap)
    content.vb: Public Function TryGetRangeShardMap(Of TKey)(shardMapName As String, ByRef shardMap As RangeShardMap(Of TKey)) As Boolean
    parameters:
    - id: shardMapName
      type: System.String
      description: Name of shard map.
    - id: shardMap
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap{{TKey}}
      description: Shard map with the specified name.
    typeParameters:
    - id: TKey
      description: Key type.
    return:
      type: System.Boolean
      description: <code>true</code> if shard map with the specified name was found, <code>false</code> otherwise.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.TryGetRangeShardMap(Of TKey)(System.String, ByRef Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap(Of TKey))
  name.vb: TryGetRangeShardMap(Of TKey)(String, ByRef RangeShardMap(Of TKey))
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetDistinctShardLocations
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetDistinctShardLocations
  id: GetDistinctShardLocations
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  langs:
  - csharp
  - vb
  name: GetDistinctShardLocations()
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetDistinctShardLocations()
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetDistinctShardLocations
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 526
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nObtains distinct shard locations from the shard map manager.\n"
  example: []
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate", Justification = "Method is appropriate here because we're not just returning object state")]

      public IEnumerable<ShardLocation> GetDistinctShardLocations()
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate", Justification:="Method is appropriate here because we're not just returning object state")>

      Public Function GetDistinctShardLocations As IEnumerable(Of ShardLocation)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation}
      description: Collection of shard locations associated with the shard map manager.
  attributes:
  - type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute
    ctor: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Microsoft.Design
    - type: System.String
      value: CA1024:UsePropertiesWhereAppropriate
    namedArguments:
    - name: Justification
      type: System.String
      value: Method is appropriate here because we're not just returning object state
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.UpgradeGlobalStore
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.UpgradeGlobalStore
  id: UpgradeGlobalStore
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  langs:
  - csharp
  - vb
  name: UpgradeGlobalStore()
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.UpgradeGlobalStore()
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: UpgradeGlobalStore
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 555
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nUpgrades store hosting global shard map to the latest version supported by library.\n"
  example: []
  syntax:
    content: public void UpgradeGlobalStore()
    content.vb: Public Sub UpgradeGlobalStore
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.UpgradeLocalStore(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.UpgradeLocalStore(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  id: UpgradeLocalStore(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  langs:
  - csharp
  - vb
  name: UpgradeLocalStore(ShardLocation)
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.UpgradeLocalStore(Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: UpgradeLocalStore
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 582
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nUpgrades store location to the latest version supported by library.\n"
  example: []
  syntax:
    content: public void UpgradeLocalStore(ShardLocation location)
    content.vb: Public Sub UpgradeLocalStore(location As ShardLocation)
    parameters:
    - id: location
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
      description: Shard location to upgrade.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetRecoveryManager
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetRecoveryManager
  id: GetRecoveryManager
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  langs:
  - csharp
  - vb
  name: GetRecoveryManager()
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetRecoveryManager()
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetRecoveryManager
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 611
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nObtains the recovery manager for the current shard map manager instance.\n"
  example: []
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate", Justification = "Method is appropriate here because we're not just returning object state")]

      public RecoveryManager GetRecoveryManager()
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate", Justification:="Method is appropriate here because we're not just returning object state")>

      Public Function GetRecoveryManager As RecoveryManager
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
      description: "\nRecovery manager for the shard map manager.\n"
  attributes:
  - type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute
    ctor: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Microsoft.Design
    - type: System.String
      value: CA1024:UsePropertiesWhereAppropriate
    namedArguments:
    - name: Justification
      type: System.String
      value: Method is appropriate here because we're not just returning object state
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetSchemaInfoCollection
  commentId: M:Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetSchemaInfoCollection
  id: GetSchemaInfoCollection
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager
  langs:
  - csharp
  - vb
  name: GetSchemaInfoCollection()
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMapManager.GetSchemaInfoCollection()
  type: Method
  source:
    remote:
      path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
      branch: master
      repo: https://github.com/Azure/elastic-db-tools
    id: GetSchemaInfoCollection
    path: Src/ElasticScale.Client/ShardManagement/ShardMapManager/ShardMapManager.cs
    startLine: 621
  assemblies:
  - Microsoft.Azure.SqlDatabase.ElasticScale.Client
  namespace: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  summary: "\nObtains the schema info collection object for the current shard map manager instance.\n"
  example: []
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate", Justification = "Method is appropriate here because we're not just returning object state")]

      public SchemaInfoCollection GetSchemaInfoCollection()
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate", Justification:="Method is appropriate here because we're not just returning object state")>

      Public Function GetSchemaInfoCollection As SchemaInfoCollection
    return:
      type: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfoCollection
      description: schema info collection for shard map manager.
  attributes:
  - type: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute
    ctor: System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: Microsoft.Design
    - type: System.String
      value: CA1024:UsePropertiesWhereAppropriate
    namedArguments:
    - name: Justification
      type: System.String
      value: Method is appropriate here because we're not just returning object state
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap`1
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: ListShardMap<TKey>
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap<TKey>
  fullname.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap(Of TKey)
  name.vb: ListShardMap(Of TKey)
  spec.csharp:
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap`1
    name: ListShardMap
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap`1
    name: ListShardMap
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap{{TKey}}
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  definition: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap`1
  name: ListShardMap<TKey>
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap<TKey>
  fullname.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap(Of TKey)
  name.vb: ListShardMap(Of TKey)
  spec.csharp:
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap`1
    name: ListShardMap
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap`1
    name: ListShardMap
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ListShardMap
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap`1
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: RangeShardMap<TKey>
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap<TKey>
  fullname.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap(Of TKey)
  name.vb: RangeShardMap(Of TKey)
  spec.csharp:
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap`1
    name: RangeShardMap
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap`1
    name: RangeShardMap
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap{{TKey}}
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  definition: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap`1
  name: RangeShardMap<TKey>
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap<TKey>
  fullname.vb: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap(Of TKey)
  name.vb: RangeShardMap(Of TKey)
  spec.csharp:
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap`1
    name: RangeShardMap
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap`1
    name: RangeShardMap
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.RangeShardMap
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: ShardMap
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ShardMap>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap>
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap)
  name.vb: IEnumerable(Of ShardMap)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
    name: ShardMap
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
    name: ShardMap
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardMap
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ShardLocation>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation>
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation)
  name.vb: IEnumerable(Of ShardLocation)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
    name: ShardLocation
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
    name: ShardLocation
    fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
  - name: )
    fullName: )
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement
  isExternal: false
  name: ShardLocation
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.ShardLocation
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  isExternal: false
  name: RecoveryManager
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery.RecoveryManager
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  isExternal: false
  name: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Recovery
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfoCollection
  parent: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  isExternal: false
  name: SchemaInfoCollection
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema.SchemaInfoCollection
- uid: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  isExternal: false
  name: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
  fullName: Microsoft.Azure.SqlDatabase.ElasticScale.ShardManagement.Schema
